package persistence;

import model.*;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

//modeled by the example from https://github.students.cs.ubc.ca/CPSC210/JsonSerializationDemo
public class JsonReader {
    private String source;

    //EFFECTS: contructs a JsonReader with given source
    public JsonReader(String source) {
        this.source = source;
    }

    //EFFECTS: returns the chess game from the file
    public ChessGame read() throws IOException {
        String jsonData = readFile(source);
        JSONObject jsonObject = new JSONObject(jsonData);
        return parseChessGame(jsonObject);
    }

    //EFFECTS: returns the string in the file at the location of source
    public String readFile(String source) throws IOException {
        StringBuilder contentBuilder = new StringBuilder();
        try (Stream<String> stream = Files.lines(Paths.get(source), StandardCharsets.UTF_8)) {
            stream.forEach(s -> contentBuilder.append(s));
        }
        return contentBuilder.toString();
    }

    //EFFECTS: returns the chess game generated by parsing the jsonObject given
    public ChessGame parseChessGame(JSONObject jsonObject) {
        ChessGame chessGame = new ChessGame();
        addPieces(chessGame, jsonObject);
        addPlayers(chessGame,jsonObject);
        chessGame.setWhiteToMove(jsonObject.getBoolean("whiteToMove"));
        return chessGame;
    }

    //EFFECTS: adds the player in given jsonObject to given ChessGame
    public void addPlayers(ChessGame chessGame, JSONObject jsonObject) {
        JSONArray jsonArray = jsonObject.getJSONArray("players");
        for (Object json : jsonArray) {
            JSONObject nextPlayer = (JSONObject) json;
            addPlayerToGame(chessGame, nextPlayer);
        }
    }

    //EFFECTS: adds both players in jsonObject to given ChessGame
    public void addPlayerToGame(ChessGame chessGame, JSONObject jsonObject) {
        List<Piece> takenPieces = generateTakenPieces(chessGame, jsonObject);
        boolean isWhite = jsonObject.getBoolean("isWhite");
        boolean isHuman = jsonObject.getBoolean("isHuman");
        if (isWhite) {
            chessGame.setWhitePlayer(new Player(true,isHuman,takenPieces, chessGame.getBoard()));
        } else {
            chessGame.setBlackPlayer(new Player(false,isHuman,takenPieces, chessGame.getBoard()));
        }
    }

    //REQUIRES: JsonObject corresponds to a player
    //EFFECTS: returns the list of pieces generated by the pieces key in the given jsonObject
    public List<Piece> generateTakenPieces(ChessGame chessGame,JSONObject jsonObject) {
        List<Piece> pieces = new ArrayList<>();
        JSONArray jsonArray = jsonObject.getJSONArray("pieces");
        for (Object json : jsonArray) {
            JSONObject nextPiece = (JSONObject) json;
            int x = nextPiece.getInt("x");
            int y = nextPiece.getInt("y");
            boolean isWhite = nextPiece.getBoolean("isWhite");
            String type = nextPiece.getString("type");
            Piece newPiece = makeNewPiece(y,x,isWhite,type, chessGame);
            pieces.add(newPiece);
        }
        return pieces;
    }

    //REQUIRES: jsonObject corresponds to the entire chessGame
    //EFFECTS: adds the pieces in the pieces key to the chessGame
    public void addPieces(ChessGame chessGame, JSONObject jsonObject) {
        JSONArray jsonArray = jsonObject.getJSONArray("pieces");
        for (Object json : jsonArray) {
            JSONObject nextPiece = (JSONObject) json;
            addPieceToBoard(chessGame, nextPiece);
        }
    }

    //EFFECTS: adds a singular piece to the board from the given jsonObject to the given ChessGame
    public void addPieceToBoard(ChessGame chessGame, JSONObject jsonObject) {
        int x = jsonObject.getInt("x");
        int y = jsonObject.getInt("y");
        boolean isWhite = jsonObject.getBoolean("isWhite");
        String type = jsonObject.getString("type");
        makeNewPiece(y,x,isWhite,type,chessGame);
    }

    //EFFECTS: returns a new piece that is added to the board in given chessGame
    public Piece makeNewPiece(int y, int x, boolean isWhite, String type, ChessGame chessGame) {
        switch (type) {
            case "Pawn":
                return new Pawn(y,x,isWhite, chessGame.getBoard());
            case "Bishop":
                return new Bishop(y,x,isWhite, chessGame.getBoard());
            case "Rook":
                return new Rook(y,x,isWhite, chessGame.getBoard());
            case "Knight":
                return new Knight(y,x,isWhite, chessGame.getBoard());
            case "King":
                return new King(y,x,isWhite, chessGame.getBoard());
            default:
                return new Queen(y,x,isWhite, chessGame.getBoard());
        }
    }


}
